// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/04/2023 12:38:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Top_Level
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Top_Level_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clk;
reg Reset;
reg Rst;
// wires                                               
wire [31:0] Mux2x1_32bits_Y_memOrUla;
wire [4:0] Mux_5bits_Y;
wire Mux_5bits_Y_ULA;
wire [31:0] ReadData1;
wire [31:0] ReadData2;
wire [31:0] Soma4_Y;
wire [31:0] Y;
wire [31:0] Y_Ext;
wire [31:0] data_out;
wire [31:0] i_out;
wire [3:0] o_alu_control;
wire o_alu_src;
wire o_branch_beq;
wire o_branch_bne;
wire o_jump;
wire o_mem_read;
wire o_mem_write;
wire o_memto_reg;
wire o_reg_dst;
wire o_reg_write;
wire [31:0] pc_desvio;
wire [31:0] resultado;
wire zero_flag;

// assign statements (if any)                          
Top_Level i1 (
// port map - connection between master ports and signals/registers   
	.Clk(Clk),
	.Mux2x1_32bits_Y_memOrUla(Mux2x1_32bits_Y_memOrUla),
	.Mux_5bits_Y(Mux_5bits_Y),
	.Mux_5bits_Y_ULA(Mux_5bits_Y_ULA),
	.ReadData1(ReadData1),
	.ReadData2(ReadData2),
	.Reset(Reset),
	.Rst(Rst),
	.Soma4_Y(Soma4_Y),
	.Y(Y),
	.Y_Ext(Y_Ext),
	.data_out(data_out),
	.i_out(i_out),
	.o_alu_control(o_alu_control),
	.o_alu_src(o_alu_src),
	.o_branch_beq(o_branch_beq),
	.o_branch_bne(o_branch_bne),
	.o_jump(o_jump),
	.o_mem_read(o_mem_read),
	.o_mem_write(o_mem_write),
	.o_memto_reg(o_memto_reg),
	.o_reg_dst(o_reg_dst),
	.o_reg_write(o_reg_write),
	.pc_desvio(pc_desvio),
	.resultado(resultado),
	.zero_flag(zero_flag)
);
initial 
begin 
#1000000 $finish;
end 

// Clk
always
begin
	Clk = 1'b0;
	Clk = #5000 1'b1;
	#5000;
end 

// Reset
initial
begin
	Reset = 1'b0;
end 

// Rst
initial
begin
	Rst = 1'b0;
end 
endmodule

